"""
Open percent time bottom water calculated using test_calc_bottom_O2_percentage.py
and mask shelf and plot 
"""

# imports
from lo_tools import Lfun, zfun
from lo_tools import plotting_functions as pfun

import sys 
import xarray as xr
import netCDF4 as nc
from time import time
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.cm as cm
#import cmocean
import matplotlib.dates as mdates
from datetime import datetime
import pandas as pd

tt0 = time()

# 1 load datasets; assign values
fn1 = '/Users/katehewett/Documents/LO_roms/cas6_v0_live/f2022.08.08/ocean_his_0018.nc'
dsm1 = xr.open_dataset(fn1, decode_times=False)
mask_rho = dsm1.mask_rho.values.squeeze()      # 0 = land 1 = water
xrho = dsm1['lon_rho'].values
yrho = dsm1['lat_rho'].values
h = dsm1['h'].values
del fn1
del dsm1 

##Kate this is sloppy, you need to move this to LKH! 
dsm = xr.open_dataset('/Users/katehewett/Documents/LO_code/testing_plotting/clip_coords/shelf_mask_15_200m_VIclip.nc')
mask_shelf = dsm['mask_shelf'].values
del dsm

##Kate this is sloppy too 
ds = xr.open_dataset('/Users/katehewett/Documents/LKH_output/tests/percent_hypoxic/2017_2022_bottom_water_hypoxic_percentages.nc')

winter = ds['hyp_winter'].values
spring = ds['hyp_spring'].values
summer = ds['hyp_summer'].values
fall = ds['hyp_fall'].values

winter[(mask_shelf==0)]=np.nan
spring[(mask_shelf==0)]=np.nan
summer[(mask_shelf==0)]=np.nan
fall[(mask_shelf==0)]=np.nan

print('Time to load = %0.2f sec' % (time()-tt0))

tt0 = time()
Rcolors = ['#73210D','#9C6B2F','#C5B563','#A9A9A9','#77BED0','#4078B3','#112F92'] #roma w grey not green #idx 3
    
# PLOTTING
#cmap = cmocean.cm.haline_r
#cmap = cm.jet_r

plt.close('all')
fs=16
plt.rc('font', size=fs)
fig = plt.figure(figsize=(18,10))

# map
ax = fig.add_subplot(131)
pfun.add_coast(ax)
pfun.dar(ax)
ax.axis([-130, -122, 42, 52])
    
ax.contour(xrho,yrho,h, [100, 200, 2000],
colors=['grey','dimgrey','black'], linewidths=1, linestyles='solid')
ax.text(.33,.16,'100 m',color='grey',weight='bold',transform=ax.transAxes,ha='right')
ax.text(.33,.13,'200 m',color='dimgrey',weight='bold',transform=ax.transAxes,ha='right')
ax.text(.33,.1,'2000 m',color='black',weight='bold',transform=ax.transAxes,ha='right')
ax.set_title('Area of Calculation')
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
ax.set_xticks([-130, -128, -126, -124, -122])
ax.grid(True)
    
cp = ax.pcolormesh(xrho, yrho, winter)
fig1.colorbar(cp) # Add a colorbar to a plot

