# testing rolling quantiles for plotting obs data time series 

# imports
from lo_tools import Lfun, zfun, zrfun
from lo_tools import plotting_functions as pfun

#import sys 
import xarray as xr
import numpy as np
#import netCDF4 as nc

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import matplotlib.dates as mdates
from matplotlib.dates import DateFormatter
#import matplotlib.dates as mdates
from datetime import datetime
from datetime import time
import pandas as pd

## OCNMS mooring time series 
Ldir = Lfun.Lstart()

# processed data location
source = 'ocnms'
otype = 'moor' 
data_dir = Ldir['LOo'] / 'obs' / source / otype

model_dir = Ldir['LOo'] / 'extract/cas7_t0_x4b/moor/OCNMS_moorings_current' # update with tags

sn_name_dict = {
    'MB042':0,
    'CA042':1,
    'TH042':2,
    'KL027':3,
    'CE042':4,
}

numyrs = 5 # 2013 - 2017
sn_list = list(sn_name_dict.keys())
numsites = len(sn_list)

# update with input tags for start and stop 
# make some datetimes for plotting 
mdates1 = pd.date_range(start='2013-04-01',end='2017-04-01', freq='AS-APR')
mdates2 = pd.date_range(start='2013-11-01',end='2017-11-01', freq='AS-NOV')

# initialize plot 
plt.close('all')
fs=12
plt.rc('font', size=fs)
fig = plt.figure(figsize=(16,8))

for sn in sn_list:
    for ii in range(0,numyrs):
        plt.subplot2grid((numsites,numyrs),(sn_name_dict[sn],ii),colspan=1,rowspan=1)
        
for sn in sn_list:
    print(sn)
    in_fn = data_dir / (sn + '_2011_2023_hourly.nc')
    
    ds = xr.open_dataset(in_fn, decode_times=True)
    
    # check for hourly times < need to make these next few steps better 
    # by def'n a data frame in rolling to sample time
    df = pd.DataFrame({'times':ds['time']})
    df['time_diff'] = df['times'].diff()
    td = np.unique(df.time_diff)
    if np.unique(df.time_diff[1:-1] == pd.Timedelta('1 hour')): 
        print('all good')

    a = pd.to_datetime(ds.time.values)
    df['hours'] = a.hour
    
    OXY = ds['DO (uM)']
        
    #DataFrame.rolling(window, min_periods=None, center=False, win_type=None, on=None, axis=_NoDefault.no_default,          closed=None, step=None, method='single')
    datas = pd.Series(OXY.values[:,-1])
    rw = datas.rolling(24,min_periods=18,center=True) # axis = 1 columns; 0 = rows 

    pmean = rw.mean()
    df['p2'] = rw.quantile(0.02)
    df['p25'] = rw.quantile(0.25)
    df['p50'] = rw.quantile(0.5)
    df['p75'] = rw.quantile(0.75)
    df['p92'] = rw.quantile(0.98)
    df['pmin'] = rw.min()
    df['pmax'] = rw.max()
    
    # extract at 20h00 UTC 
    time20 = a[np.where(df.hours==20)]
    p25m = df.p25.values[np.where(df.hours==20)]
    p75m = df.p75.values[np.where(df.hours==20)]
    pminm = df.pmin.values[np.where(df.hours==20)]
    pmaxm = df.pmax.values[np.where(df.hours==20)]
    
    #timemask = (df.hours!=20)
    #p25m = np.ma.masked_where(timemask,p25)
    #p75m = np.ma.masked_where(timemask,p75)

    YRi = np.linspace(1,7,1)
    
    for ii in range(0,numyrs-1):
        plt.subplot2grid((5,5),(sn_name_dict[sn],ii),colspan=1,rowspan=1)
        axnum = sn_name_dict[sn]*numyrs+ii
        plt.gcf().axes[axnum].fill_between(time20,pminm,pmaxm,facecolor = 'lightskyblue',edgecolor = 'lightskyblue')
        plt.gcf().axes[axnum].fill_between(time20,p25m,p75m,facecolor = 'navy',edgecolor = 'navy')
        
        plt.gcf().axes[axnum].set_xlim([mdates1[ii],mdates2[ii]])
        mdp = pd.date_range(start=mdates1[ii],end=mdates2[ii],freq='MS')

        plt.gcf().axes[axnum].set_yticks(mdp)        
        date_form = DateFormatter("%m")
        plt.gcf().axes[axnum].xaxis.set_major_formatter(date_form)
        
        plt.gcf().axes[axnum].set_ylim([0,300])
        
        if sn_name_dict[sn]==0:
            plt.gcf().axes[axnum].set_title(mdates2[ii].year)
        
        plt.gcf().tight_layout()

        
    
    

    
    

