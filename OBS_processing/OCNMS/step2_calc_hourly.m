%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This takes prepped data generated by step1_prep_ocnms.m and then
% calculates hourly averages 
% hourly averages for LO import: calc's hourly averages from raw data, and
% if there are at least 3 samples / hour we save the value. This chops a
% small amount of data where (the instrument was recovered/deployed); or 
% if (QAQC omitted data from dataset provided)
% temperature is deg C; oxygen is mg/L
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all; close all

cd /Users/katehewett/Documents/LKH_output/OCNMS_processed/
load('step1_OCNMS_post2011.mat')

A = altitude;
lat = latitude;
lon = longitude;
clear longitude latitude altitude

% check sampling intervals at OCNMS are set to 10ish minutes. check for
% different times in data
ua = unique(diff(timestampsUTC));
if sum(ua ~= minutes(10))>0
    % Shift it to the start of the minute, throwing away seconds and fractional seconds
    startOfMinute = dateshift(timestampsUTC,'start','minute');
    ua = unique(diff(startOfMinute));
    if sum(ua ~= minutes(10))>0
        disp('2x check your sampling timestep')
        return
    end
end

% moving average and display window size
k = (60/minutes(ua))+1;
disp(strcat('sampled @ ='," ",num2str(minutes(ua))," ",'minutes;'," ",'k, hourly window size ='," ",num2str(k)))

clear startOfMinute timestampsLocal mtime
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% loop calculates hourly data for S O T P will ave each site as a matfile
% for import to LO obs

% make the time sampling vectors
hourly_UTC = dateshift(timestampsUTC(1),'start','minute'):hours(1):dateshift(timestampsUTC(end),'start','minute');
%dailyGrab_UTC = dateshift(timestampsUTC(1),'start','day')+hours(20):days(1):dateshift(timestampsUTC(end)+hours(20),'start','day');
pname = '/Users/katehewett/Documents/LKH_output/OCNMS_processed/step2_sitestructs'; 


for sdx = 1:length(site_names)

    sn = site_names{sdx};
    longitude = lon(sdx);
    latitude = lat(sdx);
    Z_est = -depth{sdx};
    altitude = A{sdx};

    timestamp_UTC = hourly_UTC'; 

    % calc hourly averages and fill end values with NaN
    tm = movmean(tempC{1,sdx}, k, 1, "EndPoints","fill");
    om = movmean(oxy_mgL{1,sdx}, k, 1, "EndPoints","fill");
    sm = movmean(sal{1,sdx}, k, 1, "EndPoints","fill");
    pm = movmean(pres{1,sdx}, k, 1, "EndPoints","fill");

    % checks to make sure we're only taking hourly averages where there are
    % at least 4 measurements / hour 
    tc = ones(size(tempC{1,sdx})); tc(isnan(tempC{1,sdx})) = 0; 
    oc = ones(size(oxy_mgL{1,sdx})); oc(isnan(oxy_mgL{1,sdx})) = 0; 
    sc = ones(size(sal{1,sdx})); sc(isnan(sal{1,sdx})) = 0; 
    pc = ones(size(pres{1,sdx})); pc(isnan(pres{1,sdx})) = 0; 

    tcm = movmean(tc, k, 1, "EndPoints","fill");
    ocm = movmean(oc, k, 1, "EndPoints","fill");
    scm = movmean(sc, k, 1, "EndPoints","fill");
    pcm = movmean(pc, k, 1, "EndPoints","fill");

    figure(sdx)
    plot(timestampsUTC,tempC{1,sdx}(:,end),'m.'); hold on 
    %plot(timestampsUTC,tm(:,end),'c.'); 
    title(sn)

    % interp to match model output hourly times and save
    fn1 = strcat(sn,'_',num2str(min(unique(year(timestampsUTC)))),'_',num2str(max(unique(year(timestampsUTC)))),'_hourly.mat');

    IT = interp1(timestampsUTC,tm,timestamp_UTC,'linear');
    OXY = interp1(timestampsUTC,om,timestamp_UTC,'linear');
    SAL = interp1(timestampsUTC,sm,timestamp_UTC,'linear');
    P = interp1(timestampsUTC,pm,timestamp_UTC,'linear');

    Ttest = interp1(timestampsUTC,tcm,timestamp_UTC,'linear');
    Otest = interp1(timestampsUTC,ocm,timestamp_UTC,'linear');
    Stest = interp1(timestampsUTC,scm,timestamp_UTC,'linear');
    Ptest = interp1(timestampsUTC,pcm,timestamp_UTC,'linear');

    clear tcm ocm scm pcm tc oc sc pc tm om sm pm tc oc sc pc 

    IT(Ttest<0.4 & Ttest>0) = NaN; 
    OXY(Otest<0.4 & Otest>0) = NaN;
    SAL(Stest<0.4 & Stest>0) = NaN;
    P(Ptest<0.4 & Ptest>0) = NaN;

    OXY(OXY<0) = 0;

    plot(timestamp_UTC,IT(:,end),'ko'); hold on 

    %% shift orientation of data for the LO format; Z_est x time
    %IT = IT'; 
    %OXY = OXY'; 
    %SAL = SAL'; 
    %P = P'; 

    %altitude = altitude'; 
    %Z_est = -Z_est'; 
    %timestamp_UTC = timestamp_UTC'; 

    %plot(timestamp_UTC,IT(end,:),'-k.'); hold on 
    
    timestamp_UTC = datenum(timestamp_UTC);

    cd(pname)
    cd 'hourly'
    save(fn1,"sn","longitude","latitude","Z_est","altitude","IT","OXY","SAL","P","timestamp_UTC")

    clear IT OXY SAL P timestamp_UTC fn1 fn2 sn longitude latitude Z_est altitude Ttest Otest Stest Ptest

end


% not grabbing and saving 12noon local - it's in the hourly can extract and
% save space
    % % interp to match model output daily grab times and save
    % fn2 = strcat(sn,'_',num2str(min(unique(year(timestampsUTC)))),'_',num2str(max(unique(year(timestampsUTC)))),'_grabdaily.mat');
    % 
    % ddx = find(hour(timestamp_UTC)==20); % find the 12noon local hour / 20 UTC 
    % IT = IT(ddx,:);
    % OXY = OXY(ddx,:);
    % SAL = SAL(ddx,:);
    % P = P(ddx,:);
    % timestamp_UTC = timestamp_UTC(ddx);
    % 
    % plot(timestamp_UTC,IT(:,end),'-mo'); hold on 
    % 
    % cd(pname)
    % cd 'grab_daily'
    % %save(fn2,"sn","longitude","latitude","Z_est","altitude","IT","OXY","SAL","P","timestamp_UTC")
