
# This README provides a workflow template for accessing OOI data as an LO user.

Password-based authentication for Git has been removed in favor of more secure authentication methods. 
See [this GitHub link](https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls) for more
> **Error after trying to push origin master?** GitHub deprecated password-based authentication for Git operations (circa 2021?), encouraging users to adopt more secure methods like PATs and SSH keys. You can likely resolve this error by setting up a PAT. Try working through (Optional) Step Y at the end of this README.


## STEP 1: Setup (or grab) your OOI login credentials 
**If you have an OOI login**, then you login here: [OOI site](https://ooinet.oceanobservatories.org/) [last accessed on Dec 2024]. 
On the map you'll see your login email in the upper right hand side of the map.  
Click 'user profile' / and grab your login (API username) and password (API token).  
Note if you refresh your API token, then you need to also select submit and then close. 

**If you do not have an OOI login**, then go here: [setup ooinet](https://oceanobservatories.org/m2m/) and do:  
1. Create a user account on ooinet.oceanobservatories.org, or use the CILogon button with an academic or Google account.
2. Log in
3. Navigate to the drop down menu screen in the top-right corner menu
4. Click on the “User Profile” element of the drop down.
5. Copy and save the following data from the user profile: API Username and API Token.  

**Don't put your username/token in places it will post to your public git**

## STEP 2: Setup directory on local machine and fork the OOI repo 

**On your local machine: Create a directory to clone the ooi-data-explorations repo.** 
>just a guide, use your own directories. This is on the same level that I have LO saved on my personal comuter. 
```  
    mkdir -p ~/Documents/OOI
    cd ~/Documents/OOI
```
Create new "OOI" repo on GitHub desktop:  
 DO File -> New Repository...  
OOI / description / Git Ignore: Python/ License: MIT License  
*publish repo*

**On github, fork the oceanobservatories/ooi-data-explorations repository to your account:**  
Login to your GitHub account and navigate to the OOI data explorations repo: 
[OOI repo](https://github.com/oceanobservatories/ooi-data-explorations)  
In the top-right corner of the page, click Fork, and follow prompts  
*More details on creating forks are [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo)*

**On your local machine, clone a copy of your fork and add upstream feed:**  
```
        cd ~/Documents/OOI
        git clone https://github.com/katehewett/ooi-data-explorations.git
        
```
Add upstream feed for the master repo  
```
        cd ooi-data-explorations/
        git remote add upstream git@github.com:oceanobservatories/ooi-data-explorations.git
        git fetch upstream 
```
> ***Error after trying to fetch?*** It's likely because you need to add a SSH key to your github settings. Try working through (Optional) Step X at the end of this README. 

Set the local master to point instead to the upstream master branch
```
git branch master --set-upstream-to upstream/master
```
Keep your master branch updated, tied to the upstream master, and
keep your remote fork in sync with the official repository (do this regularly)
```
git pull --ff-only upstream master
git push origin master # <outdated!! talk to parker then fix 2:50pm>
```

 

# <outdated!! talk to parker then fix 2:50pm> update their readme by following here: https://www.geeksforgeeks.org/how-to-fix-support-for-password-authentication-was-removed/


## (Optional) Step X:
Checking for ssh keys, adding ssh keys, and *hopefully* fixing the error code after trying to fetch upstream in step 2. Try:  

### 1. On your local machine, check for existing ssh keys  
Follow instructions on [how to check for ssh keys](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys).

### 2. If no ssh key for GitHub, generate a new ssh key and add to agent    
[Link](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) for github how-to Instructions.  

Plus an example, of what worked for me...  
In Terminal, on your local machine:  
- **Create a new SSH key, using your github email as a label:**
 

    ```
    ssh-keygen -t ed25519 -C "your_email@example.com"
    ``` 
    *"your_email@example.com" is your github email, e.g. "hewett.kate@gmail.com".*  
    And when prompted, you'll enter a passphrase 2x.

    *some threads mentione doing: `ssh-keygen -t rsa -b 4096 -C "your_email@example.com"` is better than ed25519, but I haven't tested it.  I defaulted to use github's rec.*

- **Add your SSH key to the ssh-agent:**
    ```
    eval "$(ssh-agent -s)"
    open ~/.ssh/config     # checks if file exists
    touch ~/.ssh/config    # if file doesn't exist  
    open ~/.ssh/config
    ```
    Enter text in config file, and use whatever you named your ssh key name above:

    ```
    Host github.com
        AddKeysToAgent yes
        UseKeychain yes
        IdentityFile ~/.ssh/id_ed25519
    ```
    Add your SSH private key to the ssh-agent and store your passphrase in the keycahin.  

    ```
    ssh-add --apple-use-keychain ~/.ssh/id_ed25519
    ```

### 3. Add new SSH key to your github  
To configure your account on GitHub.com to use your new (or existing) SSH key, you'll also need to add the key to your account. More instructions [here.](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)  
Plus an example, of what worked for me...  
- **Copy the SSH public key to your clipboard**   
If your SSH public key file has a different name than the example code, modify the filename to match your current setup. When copying your key, don't add any newlines or whitespace. In Terminal, do:
    ```
    $ pbcopy < ~/.ssh/id_ed25519.pub
    ```
    *This copies the contents of the id_ed25519.pub file to your clipboard*

- **Add SSH key to your Github profile**  
-- Login to your github.com profile, and in the upper-right corner the page, click your profile photo, then click Settings.  
-- In the "Access" section of the sidebar, click  SSH and GPG keys.  
Click New SSH key.  
-- In the "Title" field, add a descriptive label for the new key. For example, if you're using a personal laptop, you might call this key "Personal laptop".  
-- Select the type of key [Authentication Key].  
-- In the "Key" field, paste your public key.  
-- Click Add SSH key.

### 4. Test by trying to fetch upstream again in *"Step 2: Setup directory on local machine and fork the OOI repo"* 
You should now be able to execute git fetch upstream command 

## (Optional) Step Y: 
A personal access token (PAT) is a secure way to authenticate with GitHub from the command line or other applications. This will *hopefully* fix your error code step 2. Try: 



